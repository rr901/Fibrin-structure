# -*- coding: utf-8 -*-
"""Fibrin structure plasma TF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16QcTOqy0zvOp939SAkKPvsn8Fj9RfrqB
"""

import numpy as np
import pandas as pd
import statsmodels.api as sm

# Create a DataFrame with your updated data
data = {
    "Fibrinogen Concentration": [1, 2.7, 5, 10, 1, 2.7],
    "TF (pM)": [75, 75, 75, 75, 27.7, 75],
    "Average Diameter": [135.2, 214.2, 330.5, 400, 177.6, 229.2],
    "Average Pore Size": [6.2, 4.5, 4.1, 3.7, 6.538, 4.517],
    "Average % Density": [0.5995, 10.3, 10.6, 11.9, 5.312, 10.26],
    "Average Fiber Length": [15.9, 14.3, 10.8, 10.2, 5.905, 14.36],
    "Lag Time": [70, 45, 50, 59, 80, 45],
    "Rate of Formation": [11, 39, 14, 14, 21, 39],
    "Max Turbidity": [0.87, 4.16, 7.23, 11.42, 2.15, 4.16]
}

df = pd.DataFrame(data)

# Define the independent variables (Fibrinogen and TF)
X = df[["Fibrinogen Concentration", "TF (pM)"]]
X = sm.add_constant(X)  # Add a constant term (intercept)

# Iterate through the dependent variables
dependent_variables = df.columns[2:]

for dependent_variable in dependent_variables:
    y = df[dependent_variable]
    model = sm.OLS(y, X).fit()

    # Get the regression parameters
    params = model.params

    # Calculate R-squared value
    r_squared = model.rsquared

    # Create the equation string
    equation = f"{dependent_variable} = {params[0]:.2f} + "

    for i, var in enumerate(["Fibrinogen Concentration", "TF (pM)"]):
        equation += f"{params[var]:.2f} * {var}"

        if i < 1:
            equation += " + "

    # Print the equation and R-squared value
    print(f"{dependent_variable}:")
    print(equation)
    print(f"R-squared: {r_squared}\n")

import numpy as np
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt

# Create a DataFrame with your updated data
data = {
    "Fibrinogen Concentration": [1, 2.7, 5, 10, 1, 2.7],
    "TF (pM)": [75, 75, 75, 75, 27.7, 75],
    "Average Diameter": [135.2, 214.2, 330.5, 400, 177.6, 229.2],
    "Average Pore Size": [6.2, 4.5, 4.1, 3.7, 6.538, 4.517],
    "Average % Density": [0.5995, 10.3, 10.6, 11.9, 5.312, 10.26],
    "Average Fiber Length": [15.9, 14.3, 10.8, 10.2, 5.905, 14.36],
    "Lag Time": [70, 45, 50, 59, 80, 45],
    "Rate of Formation": [11, 39, 14, 14, 21, 39],
    "Max Turbidity": [0.87, 4.16, 7.23, 11.42, 2.15, 4.16]
}

df = pd.DataFrame(data)

# Define the independent variables (Fibrinogen and TF)
X = df[["Fibrinogen Concentration", "TF (pM)"]]
X = sm.add_constant(X)  # Add a constant term (intercept)

# Iterate through the dependent variables
dependent_variables = df.columns[2:]

for dependent_variable in dependent_variables:
    y = df[dependent_variable]
    model = sm.OLS(y, X).fit()

    # Get the regression parameters
    params = model.params

    # Calculate R-squared value
    r_squared = model.rsquared

    # Generate predicted values
    y_pred = X.dot(params)

    # Create the actual vs. expected plot
    plt.figure(figsize=(10, 6))
    plt.scatter(y, y_pred, edgecolors='b')
    plt.xlabel(f"Actual {dependent_variable}")
    plt.ylabel(f"Expected {dependent_variable}")
    plt.title(f"Actual vs. Expected {dependent_variable}")

    # Construct the equation (including intercept)
    equation = f"{dependent_variable} = {params[0]:.2f} + "

    for i, var in enumerate(["Fibrinogen Concentration", "TF (pM)"]):
        equation += f"{params[var]:.2f} * {var}"

        if i < 1:
            equation += " + "

    r_squared_text = f"R-squared = {r_squared:.4f}"
    plt.text(0.1, 0.9, equation, transform=plt.gca().transAxes, fontsize=12)
    plt.text(0.1, 0.8, r_squared_text, transform=plt.gca().transAxes, fontsize=12)

    # Show the plot
    plt.show()

